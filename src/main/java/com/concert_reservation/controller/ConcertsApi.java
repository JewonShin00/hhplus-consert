/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.concert_reservation.controller;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;


import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;

import java.util.Optional;
import javax.annotation.Generated;

import com.concert_reservation.repository.ConcertListResponse;
import com.concert_reservation.repository.SeatListResponse;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-10T23:17:48.086265+09:00[Asia/Seoul]")
@Validated
@Tag(name = "ConcertController", description = "the ConcertController API")
public interface ConcertsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /concerts : Get list of concerts
     * 예약할 수 있는 콘서트 목록을 가져옵니다.
     *
     * @param location 특정 지역의 콘서트만 조회 (optional)
     * @param date 특정 날짜에 열리는 콘서트만 조회 (optional)
     * @return A list of available concerts. (status code 200)
     */
    @Operation(
        operationId = "getConcerts",
        summary = "Get list of concerts",
        description = "예약할 수 있는 콘서트 목록을 가져옵니다.",
        tags = { "ConcertController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of available concerts.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConcertListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/concerts",
        produces = { "application/json" }
    )
    default ResponseEntity<ConcertListResponse> getConcerts(
        @Parameter(name = "location", description = "특정 지역의 콘서트만 조회", in = ParameterIn.QUERY) @Valid @RequestParam(value = "location", required = false) String location,
        @Parameter(name = "date", description = "특정 날짜에 열리는 콘서트만 조회", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"concerts\" : [ { \"date\" : \"2024-11-01T00:00:00.000+00:00\", \"concertId\" : \"123\", \"location\" : \"Seoul\", \"title\" : \"Summer Night Concert\" }, { \"date\" : \"2024-11-01T00:00:00.000+00:00\", \"concertId\" : \"123\", \"location\" : \"Seoul\", \"title\" : \"Summer Night Concert\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /concerts/{concertId}/seats : Get list of seats for a specific concert
     * 특정 콘서트에서 예약할 수 있는 좌석 목록을 보여줍니다.
     *
     * @param concertId 콘서트 ID (required)
     * @param onlyAvailable true일 경우 예약 가능한 좌석만 조회 (optional)
     * @return A list of seats for the specified concert. (status code 200)
     */
    @Operation(
        operationId = "getSeats",
        summary = "Get list of seats for a specific concert",
        description = "특정 콘서트에서 예약할 수 있는 좌석 목록을 보여줍니다.",
        tags = { "SeatController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of seats for the specified concert.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SeatListResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/concerts/{concertId}/seats",
        produces = { "application/json" }
    )
    default ResponseEntity<SeatListResponse> getSeats(
        @Parameter(name = "concertId", description = "콘서트 ID", required = true, in = ParameterIn.PATH) @PathVariable("concertId") String concertId,
        @Parameter(name = "onlyAvailable", description = "true일 경우 예약 가능한 좌석만 조회", in = ParameterIn.QUERY) @Valid @RequestParam(value = "onlyAvailable", required = false) Boolean onlyAvailable
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"seats\" : [ { \"isTempReserved\" : false, \"reservedUntil\" : \"2024-11-01T10:00:00Z\", \"isReserved\" : false, \"seatId\" : \"seat1\", \"seatNumber\" : 1 }, { \"isTempReserved\" : false, \"reservedUntil\" : \"2024-11-01T10:00:00Z\", \"isReserved\" : false, \"seatId\" : \"seat1\", \"seatNumber\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
