plugins {
    id 'java'
<<<<<<< HEAD
    id 'org.springframework.boot' version '3.1.3' // Spring Boot 버전에 맞춰 업데이트
    id 'io.spring.dependency-management' version '1.1.3' // Spring 의존성 관리 플러그인
}

group = 'com.yourprojectname'
version = '1.0.0'
sourceCompatibility = '17' // 사용 중인 Java 버전에 맞게 설정 (예: 17)
=======
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.openapi.generator' version '6.6.0'
}

group = 'com.concert_reservation'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
>>>>>>> a07730cdd8c99e40be45653589ae9d73341e40f5

repositories {
    mavenCentral()
}

dependencies {
<<<<<<< HEAD
    // Spring Boot Starter Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'  // REST API를 위한 Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'  // JPA를 통한 DB 연동
    implementation 'org.springframework.boot:spring-boot-starter-validation'  // DTO 검증을 위한 의존성

    // Database Dependency (예시: H2 Database)
    runtimeOnly 'com.h2database:h2'  // 테스트 및 임베디드 DB 사용 시

    // Optional - MySQL이나 PostgreSQL 같은 다른 DB를 사용할 때는 해당 DB 의존성을 추가
    // runtimeOnly 'mysql:mysql-connector-java'  // MySQL 사용 시
    // runtimeOnly 'org.postgresql:postgresql'  // PostgreSQL 사용 시

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'  // Spring Boot 기본 테스트 의존성


}

test {
    useJUnitPlatform()
}
=======
    // Spring Boot starter dependencies
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // OpenAPI UI dependencies
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // Jakarta Servlet API for Spring Boot 3.x
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    // Jakarta Validation API (used for validation with Spring Boot 3.x)
    implementation 'jakarta.validation:jakarta.validation-api:3.0.0'

    // JJWT Library for JWT handling (version 0.11.5)
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 처리 필요시 사용

    // JAXB dependencies for XML handling (needed by JJWT)
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.0'

    // Mockito for unit testing
    testImplementation 'org.mockito:mockito-core:5.0.0'

    // H2 Database for testing purposes
    testImplementation 'com.h2database:h2'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
}

tasks.named('test') {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/openapi.yaml"
    outputDir = "$buildDir/generated"
    additionalProperties = [
            interfaceOnly: 'true'
    ]
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}
>>>>>>> a07730cdd8c99e40be45653589ae9d73341e40f5
