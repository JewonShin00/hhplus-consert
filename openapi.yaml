openapi: 3.0.0
info:
  title: Concert Reservation API
  version: 1.0.0
  description: API for concert reservations and payments

paths:
  /concerts:
    get:
      summary: 예약할 수 있는 콘서트 목록을 가져옵니다.
      parameters:
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: 특정 지역의 콘서트만 조회
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: 특정 날짜에 열리는 콘서트만 조회
      responses:
        '200':
          description: A list of available concerts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcertListResponse'

  /concerts/{concertId}/seats:
    get:
      summary: 특정 콘서트에서 예약할 수 있는 좌석 목록을 보여줍니다.
      parameters:
        - name: concertId
          in: path
          required: true
          schema:
            type: string
          description: 콘서트 ID
        - name: onlyAvailable
          in: query
          required: false
          schema:
            type: boolean
          description: true일 경우 예약 가능한 좌석만 조회
      responses:
        '200':
          description: A list of available seats for the concert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeatListResponse'

  /reservations:
    post:
      summary: 사용자가 특정 좌석을 예약합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
      responses:
        '200':
          description: Reservation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'

  /payments:
    post:
      summary: 사용자가 예약한 좌석을 결제합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'

  /queue/status:
    get:
      summary: 사용자의 대기열 상태를 조회합니다.
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: 사용자 ID
        - name: concertId
          in: query
          required: true
          schema:
            type: string
          description: 콘서트 ID
      responses:
        '200':
          description: Queue status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueStatusResponse'

components:
  schemas:
    ConcertListResponse:
      type: object
      properties:
        concerts:
          type: array
          items:
            $ref: '#/components/schemas/ConcertDTO'

    ConcertDTO:
      type: object
      properties:
        concertId:
          type: string
        title:
          type: string
        date:
          type: string
          format: date
        location:
          type: string

    SeatListResponse:
      type: object
      properties:
        seats:
          type: array
          items:
            $ref: '#/components/schemas/SeatDTO'

    SeatDTO:
      type: object
      properties:
        seatId:
          type: string
        seatNumber:
          type: integer
        isReserved:
          type: boolean
        isTempReserved:
          type: boolean
        reservedUntil:
          type: string
          format: date-time

    ReservationRequest:
      type: object
      properties:
        userId:
          type: string
        concertId:
          type: string
        seatId:
          type: string

    ReservationResponse:
      type: object
      properties:
        reservationId:
          type: string
        status:
          type: string
          enum: [TEMP, CONFIRMED]
        expiresAt:
          type: string
          format: date-time

    PaymentRequest:
      type: object
      properties:
        userId:
          type: string
        reservationId:
          type: string
        amount:
          type: integer

    PaymentResponse:
      type: object
      properties:
        paymentId:
          type: string
        status:
          type: string
          enum: [SUCCESS, FAILED]

    QueueStatusResponse:
      type: object
      properties:
        userId:
          type: string
        concertId:
          type: string
        position:
          type: integer
        status:
          type: string
          enum: [WAITING, PROCESSING, COMPLETED]