openapi: 3.0.0
info:
  title: Concert Reservation API
  version: 1.0.0
  description: API for managing concert reservations, seat availability, payments, and queue status.

paths:
  /concerts:
    get:
      summary: Get list of concerts
      description: 예약할 수 있는 콘서트 목록을 가져옵니다.
      operationId: getConcerts
      tags:
        - ConcertController
      parameters:
        - in: query
          name: location
          schema:
            type: string
          required: false
          description: 특정 지역의 콘서트만 조회
        - in: query
          name: date
          schema:
            type: string
            format: date
          required: false
          description: 특정 날짜에 열리는 콘서트만 조회
      responses:
        '200':
          description: A list of available concerts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcertListResponse'

  /concerts/{concertId}/seats:
    get:
      summary: Get list of seats for a specific concert
      description: 특정 콘서트에서 예약할 수 있는 좌석 목록을 보여줍니다.
      operationId: getSeats
      tags:
        - SeatController
      parameters:
        - in: path
          name: concertId
          required: true
          schema:
            type: string
          description: 콘서트 ID
        - in: query
          name: onlyAvailable
          schema:
            type: boolean
          required: false
          description: true일 경우 예약 가능한 좌석만 조회
      responses:
        '200':
          description: A list of seats for the specified concert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeatListResponse'

  /reservations:
    post:
      summary: Reserve a seat
      description: 사용자가 특정 좌석을 예약합니다.
      operationId: createReservation
      tags:
        - ReservationController
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
      responses:
        '200':
          description: Seat reservation response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'

  /payments:
    post:
      summary: Make a payment
      description: 사용자가 예약한 좌석을 결제합니다.
      operationId: createPayment
      tags:
        - PaymentController
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'

  /queue/status:
    get:
      summary: Get user queue status
      description: 사용자의 대기열 상태를 조회합니다.
      operationId: getQueueStatus
      tags:
        - QueueController
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
          description: 사용자 ID
        - in: query
          name: concertId
          required: true
          schema:
            type: string
          description: 콘서트 ID
      responses:
        '200':
          description: Queue status for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueStatusResponse'

components:
  schemas:
    ConcertListResponse:
      type: object
      properties:
        concerts:
          type: array
          items:
            $ref: '#/components/schemas/ConcertDTO'

    ConcertDTO:
      type: object
      properties:
        concertId:
          type: string
          example: "123"
        title:
          type: string
          example: "Summer Night Concert"
        date:
          type: string
          format: date
          example: "2024-11-01"
        location:
          type: string
          example: "Seoul"

    SeatListResponse:
      type: object
      properties:
        seats:
          type: array
          items:
            $ref: '#/components/schemas/SeatDTO'

    SeatDTO:
      type: object
      properties:
        seatId:
          type: string
          example: "seat1"
        seatNumber:
          type: integer
          example: 1
        isReserved:
          type: boolean
          example: false
        isTempReserved:
          type: boolean
          example: false
        reservedUntil:
          type: string
          format: date-time
          example: "2024-11-01T10:00:00Z"

    ReservationRequest:
      type: object
      properties:
        userId:
          type: string
          example: "user123"
        concertId:
          type: string
          example: "123"
        seatId:
          type: string
          example: "seat1"

    ReservationResponse:
      type: object
      properties:
        reservationId:
          type: string
          example: "res123"
        status:
          type: string
          enum:
            - TEMP
            - CONFIRMED
          example: "TEMP"
        expiresAt:
          type: string
          format: date-time
          example: "2024-11-01T10:00:00Z"

    PaymentRequest:
      type: object
      properties:
        userId:
          type: string
          example: "user123"
        reservationId:
          type: string
          example: "res123"
        amount:
          type: integer
          example: 50000

    PaymentResponse:
      type: object
      properties:
        paymentId:
          type: string
          example: "pay123"
        status:
          type: string
          enum:
            - SUCCESS
            - FAILED
          example: "SUCCESS"

    QueueStatusResponse:
      type: object
      properties:
        userId:
          type: string
          example: "user123"
        concertId:
          type: string
          example: "123"
        position:
          type: integer
          example: 1
        status:
          type: string
          enum:
            - WAITING
            - PROCESSING
            - COMPLETED
          example: "WAITING"